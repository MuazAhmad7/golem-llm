package golem:search@1.0.0;

interface search {
  // --- Field Types ---
  
  enum field-type {
    text,
    number,
    boolean,
    date,
    object,
    array,
  }

  // --- Schema Definition ---

  record field-definition {
    name: string,
    field-type: field-type,
    searchable: bool,
    facetable: bool,
    retrievable: bool,
    sortable: bool,
  }

  record schema {
    primary-key: string,
    fields: list<field-definition>,
    provider-params: option<string>, // JSON string for provider-specific settings
  }

  // --- Document Operations ---

  record document {
    id: option<string>,
    data: string, // JSON-encoded document data
  }

  // --- Search Operations ---

  record facet-filter {
    field: string,
    value: string,
  }

  record facet-request {
    field: string,
    filters: list<facet-filter>,
  }

  record sort-option {
    field: string,
    ascending: bool,
  }

  record search-query {
    q: string,
    filters: option<list<string>>,
    facets: option<list<facet-request>>,
    page: option<u32>,
    per-page: option<u32>,
    sort: option<list<sort-option>>,
    highlight: option<bool>,
    highlight-pre-tag: option<string>,
    highlight-post-tag: option<string>,
    attributes-to-retrieve: option<list<string>>,
    timeout: option<u32>,
  }

  record search-hit {
    id: string,
    data: string, // JSON-encoded hit data
    score: option<f64>,
    highlighted: option<string>, // JSON-encoded highlighted fields
  }

  record facet-value {
    value: string,
    count: u32,
  }

  record facet-result {
    field: string,
    values: list<facet-value>,
  }

  record search-results {
    hits: list<search-hit>,
    total: u32,
    page: u32,
    per-page: u32,
    facets: option<list<facet-result>>,
    processing-time-ms: option<u32>,
  }

  // --- Error Handling ---

  enum error-code {
    index-not-found,
    document-not-found,
    invalid-query,
    rate-limited,
    authentication-failed,
    timeout,
    unsupported,
    internal-error,
  }

  record error {
    code: error-code,
    message: string,
    retry-after: option<u32>, // seconds
  }

  // --- Core Interface ---

  // Index Management
  create-index: func(name: string, schema: schema) -> result<_, error>;
  delete-index: func(name: string) -> result<_, error>;
  list-indices: func() -> result<list<string>, error>;
  update-schema: func(name: string, schema: schema) -> result<_, error>;

  // Document Operations
  upsert-document: func(index: string, document: document) -> result<string, error>;
  upsert-documents: func(index: string, documents: list<document>) -> result<list<string>, error>;
  get-document: func(index: string, id: string) -> result<document, error>;
  delete-document: func(index: string, id: string) -> result<_, error>;
  delete-documents: func(index: string, ids: list<string>) -> result<_, error>;

  // Search Operations
  search: func(index: string, query: search-query) -> result<search-results, error>;
}

world search-provider {
  export search;
}